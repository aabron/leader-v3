{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = removeProperties;\nvar _constants = require(\"../constants\");\nconst CLEAR_KEYS = [\"tokens\", \"start\", \"end\", \"loc\", \"raw\", \"rawValue\"];\nconst CLEAR_KEYS_PLUS_COMMENTS = [..._constants.COMMENT_KEYS, \"comments\", ...CLEAR_KEYS];\nfunction removeProperties(node) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  for (const key of map) {\n    if (node[key] != null) node[key] = undefined;\n  }\n  for (const key of Object.keys(node)) {\n    if (key[0] === \"_\" && node[key] != null) node[key] = undefined;\n  }\n  const symbols = Object.getOwnPropertySymbols(node);\n  for (const sym of symbols) {\n    node[sym] = null;\n  }\n}","map":{"version":3,"names":["_constants","require","CLEAR_KEYS","CLEAR_KEYS_PLUS_COMMENTS","COMMENT_KEYS","removeProperties","node","opts","arguments","length","undefined","map","preserveComments","key","Object","keys","symbols","getOwnPropertySymbols","sym"],"sources":["C:\\Users\\8068programmer\\Documents\\GitHub\\leader-v3\\client\\node_modules\\@babel\\types\\src\\modifications\\removeProperties.ts"],"sourcesContent":["import { COMMENT_KEYS } from \"../constants\";\nimport type * as t from \"..\";\n\nconst CLEAR_KEYS = [\n  \"tokens\", // only exist in t.File\n  \"start\",\n  \"end\",\n  \"loc\",\n  // Fixme: should be extra.raw / extra.rawValue?\n  \"raw\",\n  \"rawValue\",\n] as const;\n\nconst CLEAR_KEYS_PLUS_COMMENTS = [\n  ...COMMENT_KEYS,\n  \"comments\",\n  ...CLEAR_KEYS,\n] as const;\n\nexport type Options = { preserveComments?: boolean };\n/**\n * Remove all of the _* properties from a node along with the additional metadata\n * properties like location data and raw token data.\n */\nexport default function removeProperties(\n  node: t.Node,\n  opts: Options = {},\n): void {\n  const map = opts.preserveComments ? CLEAR_KEYS : CLEAR_KEYS_PLUS_COMMENTS;\n  for (const key of map) {\n    // @ts-expect-error tokens only exist in t.File\n    if (node[key] != null) node[key] = undefined;\n  }\n\n  for (const key of Object.keys(node)) {\n    // @ts-expect-error string can not index node\n    if (key[0] === \"_\" && node[key] != null) node[key] = undefined;\n  }\n\n  const symbols: Array<symbol> = Object.getOwnPropertySymbols(node);\n  for (const sym of symbols) {\n    // @ts-expect-error Fixme: document symbol properties\n    node[sym] = null;\n  }\n}\n"],"mappings":";;;;;;AAAA,IAAAA,UAAA,GAAAC,OAAA;AAGA,MAAMC,UAAU,GAAG,CACjB,QAAQ,EACR,OAAO,EACP,KAAK,EACL,KAAK,EAEL,KAAK,EACL,UAAU,CACF;AAEV,MAAMC,wBAAwB,GAAG,CAC/B,GAAGH,UAAA,CAAAI,YAAY,EACf,UAAU,EACV,GAAGF,UAAU,CACL;AAOK,SAASG,gBAAgBA,CACtCC,IAAY,EAEN;EAAA,IADNC,IAAa,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAElB,MAAMG,GAAG,GAAGJ,IAAI,CAACK,gBAAgB,GAAGV,UAAU,GAAGC,wBAAwB;EACzE,KAAK,MAAMU,GAAG,IAAIF,GAAG,EAAE;IAErB,IAAIL,IAAI,CAACO,GAAG,CAAC,IAAI,IAAI,EAAEP,IAAI,CAACO,GAAG,CAAC,GAAGH,SAAS;EAC9C;EAEA,KAAK,MAAMG,GAAG,IAAIC,MAAM,CAACC,IAAI,CAACT,IAAI,CAAC,EAAE;IAEnC,IAAIO,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,IAAIP,IAAI,CAACO,GAAG,CAAC,IAAI,IAAI,EAAEP,IAAI,CAACO,GAAG,CAAC,GAAGH,SAAS;EAChE;EAEA,MAAMM,OAAsB,GAAGF,MAAM,CAACG,qBAAqB,CAACX,IAAI,CAAC;EACjE,KAAK,MAAMY,GAAG,IAAIF,OAAO,EAAE;IAEzBV,IAAI,CAACY,GAAG,CAAC,GAAG,IAAI;EAClB;AACF"},"metadata":{},"sourceType":"script","externalDependencies":[]}