{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VISITOR_KEYS = exports.NODE_PARENT_VALIDATIONS = exports.NODE_FIELDS = exports.FLIPPED_ALIAS_KEYS = exports.DEPRECATED_KEYS = exports.BUILDER_KEYS = exports.ALIAS_KEYS = void 0;\nexports.arrayOf = arrayOf;\nexports.arrayOfType = arrayOfType;\nexports.assertEach = assertEach;\nexports.assertNodeOrValueType = assertNodeOrValueType;\nexports.assertNodeType = assertNodeType;\nexports.assertOneOf = assertOneOf;\nexports.assertOptionalChainStart = assertOptionalChainStart;\nexports.assertShape = assertShape;\nexports.assertValueType = assertValueType;\nexports.chain = chain;\nexports.default = defineType;\nexports.defineAliasedType = defineAliasedType;\nexports.typeIs = typeIs;\nexports.validate = validate;\nexports.validateArrayOfType = validateArrayOfType;\nexports.validateOptional = validateOptional;\nexports.validateOptionalType = validateOptionalType;\nexports.validateType = validateType;\nvar _is = require(\"../validators/is\");\nvar _validate = require(\"../validators/validate\");\nconst VISITOR_KEYS = {};\nexports.VISITOR_KEYS = VISITOR_KEYS;\nconst ALIAS_KEYS = {};\nexports.ALIAS_KEYS = ALIAS_KEYS;\nconst FLIPPED_ALIAS_KEYS = {};\nexports.FLIPPED_ALIAS_KEYS = FLIPPED_ALIAS_KEYS;\nconst NODE_FIELDS = {};\nexports.NODE_FIELDS = NODE_FIELDS;\nconst BUILDER_KEYS = {};\nexports.BUILDER_KEYS = BUILDER_KEYS;\nconst DEPRECATED_KEYS = {};\nexports.DEPRECATED_KEYS = DEPRECATED_KEYS;\nconst NODE_PARENT_VALIDATIONS = {};\nexports.NODE_PARENT_VALIDATIONS = NODE_PARENT_VALIDATIONS;\nfunction getType(val) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\nfunction validate(validate) {\n  return {\n    validate\n  };\n}\nfunction typeIs(typeName) {\n  return typeof typeName === \"string\" ? assertNodeType(typeName) : assertNodeType(...typeName);\n}\nfunction validateType(typeName) {\n  return validate(typeIs(typeName));\n}\nfunction validateOptional(validate) {\n  return {\n    validate,\n    optional: true\n  };\n}\nfunction validateOptionalType(typeName) {\n  return {\n    validate: typeIs(typeName),\n    optional: true\n  };\n}\nfunction arrayOf(elementType) {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\nfunction arrayOfType(typeName) {\n  return arrayOf(typeIs(typeName));\n}\nfunction validateArrayOfType(typeName) {\n  return validate(arrayOfType(typeName));\n}\nfunction assertEach(callback) {\n  function validator(node, key, val) {\n    if (!Array.isArray(val)) return;\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) (0, _validate.validateChild)(node, subkey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\nfunction assertOneOf() {\n  for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {\n    values[_key] = arguments[_key];\n  }\n  function validate(node, key, val) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(`Property ${key} expected value to be one of ${JSON.stringify(values)} but got ${JSON.stringify(val)}`);\n    }\n  }\n  validate.oneOf = values;\n  return validate;\n}\nfunction assertNodeType() {\n  for (var _len2 = arguments.length, types = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    types[_key2] = arguments[_key2];\n  }\n  function validate(node, key, val) {\n    for (const type of types) {\n      if ((0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);\n  }\n  validate.oneOfNodeTypes = types;\n  return validate;\n}\nfunction assertNodeOrValueType() {\n  for (var _len3 = arguments.length, types = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    types[_key3] = arguments[_key3];\n  }\n  function validate(node, key, val) {\n    for (const type of types) {\n      if (getType(val) === type || (0, _is.default)(type, val)) {\n        (0, _validate.validateChild)(node, key, val);\n        return;\n      }\n    }\n    throw new TypeError(`Property ${key} of ${node.type} expected node to be of a type ${JSON.stringify(types)} but instead got ${JSON.stringify(val == null ? void 0 : val.type)}`);\n  }\n  validate.oneOfNodeOrValueTypes = types;\n  return validate;\n}\nfunction assertValueType(type) {\n  function validate(node, key, val) {\n    const valid = getType(val) === type;\n    if (!valid) {\n      throw new TypeError(`Property ${key} expected type of ${type} but got ${getType(val)}`);\n    }\n  }\n  validate.type = type;\n  return validate;\n}\nfunction assertShape(shape) {\n  function validate(node, key, val) {\n    const errors = [];\n    for (const property of Object.keys(shape)) {\n      try {\n        (0, _validate.validateField)(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(`Property ${key} of ${node.type} expected to have the following:\\n${errors.join(\"\\n\")}`);\n    }\n  }\n  validate.shapeOf = shape;\n  return validate;\n}\nfunction assertOptionalChainStart() {\n  function validate(node) {\n    var _current;\n    let current = node;\n    while (node) {\n      const {\n        type\n      } = current;\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n      break;\n    }\n    throw new TypeError(`Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${(_current = current) == null ? void 0 : _current.type}`);\n  }\n  return validate;\n}\nfunction chain() {\n  for (var _len4 = arguments.length, fns = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    fns[_key4] = arguments[_key4];\n  }\n  function validate() {\n    for (const fn of fns) {\n      fn(...arguments);\n    }\n  }\n  validate.chainOf = fns;\n  if (fns.length >= 2 && \"type\" in fns[0] && fns[0].type === \"array\" && !(\"each\" in fns[1])) {\n    throw new Error(`An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`);\n  }\n  return validate;\n}\nconst validTypeOpts = [\"aliases\", \"builder\", \"deprecatedAlias\", \"fields\", \"inherits\", \"visitor\", \"validate\"];\nconst validFieldKeys = [\"default\", \"optional\", \"validate\"];\nconst store = {};\nfunction defineAliasedType() {\n  for (var _len5 = arguments.length, aliases = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    aliases[_key5] = arguments[_key5];\n  }\n  return function (type) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let defined = opts.aliases;\n    if (!defined) {\n      var _store$opts$inherits$, _defined;\n      if (opts.inherits) defined = (_store$opts$inherits$ = store[opts.inherits].aliases) == null ? void 0 : _store$opts$inherits$.slice();\n      (_defined = defined) != null ? _defined : defined = [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    defineType(type, opts);\n  };\n}\nfunction defineType(type) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const inherits = opts.inherits && store[opts.inherits] || {};\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\") {\n          throw new Error(\"field defaults can only be primitives or empty arrays currently\");\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          validate: field.validate\n        };\n      }\n    }\n  }\n  const visitor = opts.visitor || inherits.visitor || [];\n  const aliases = opts.aliases || inherits.aliases || [];\n  const builder = opts.builder || inherits.builder || opts.visitor || [];\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type;\n  }\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type);\n  });\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n  store[type] = opts;\n}","map":{"version":3,"names":["_is","require","_validate","VISITOR_KEYS","exports","ALIAS_KEYS","FLIPPED_ALIAS_KEYS","NODE_FIELDS","BUILDER_KEYS","DEPRECATED_KEYS","NODE_PARENT_VALIDATIONS","getType","val","Array","isArray","validate","typeIs","typeName","assertNodeType","validateType","validateOptional","optional","validateOptionalType","arrayOf","elementType","chain","assertValueType","assertEach","arrayOfType","validateArrayOfType","callback","validator","node","key","i","length","subkey","v","process","env","BABEL_TYPES_8_BREAKING","validateChild","each","assertOneOf","_len","arguments","values","_key","indexOf","TypeError","JSON","stringify","oneOf","_len2","types","_key2","type","default","oneOfNodeTypes","assertNodeOrValueType","_len3","_key3","oneOfNodeOrValueTypes","valid","assertShape","shape","errors","property","Object","keys","validateField","error","push","message","join","shapeOf","assertOptionalChainStart","_current","current","callee","object","_len4","fns","_key4","fn","chainOf","Error","validTypeOpts","validFieldKeys","store","defineAliasedType","_len5","aliases","_key5","opts","undefined","defined","_store$opts$inherits$","_defined","inherits","slice","additional","filter","a","includes","unshift","defineType","fields","getOwnPropertyNames","field","def","visitor","builder","k","deprecatedAlias","concat","forEach","alias"],"sources":["C:\\Users\\8068programmer\\Documents\\GitHub\\leader-v3\\client\\node_modules\\@babel\\types\\src\\definitions\\utils.ts"],"sourcesContent":["import is from \"../validators/is\";\nimport { validateField, validateChild } from \"../validators/validate\";\nimport type * as t from \"..\";\n\nexport const VISITOR_KEYS: Record<string, string[]> = {};\nexport const ALIAS_KEYS: Partial<Record<NodeTypesWithoutComment, string[]>> =\n  {};\nexport const FLIPPED_ALIAS_KEYS: Record<string, NodeTypesWithoutComment[]> = {};\nexport const NODE_FIELDS: Record<string, FieldDefinitions> = {};\nexport const BUILDER_KEYS: Record<string, string[]> = {};\nexport const DEPRECATED_KEYS: Record<string, NodeTypesWithoutComment> = {};\nexport const NODE_PARENT_VALIDATIONS: Record<string, Validator> = {};\n\nfunction getType(val: any) {\n  if (Array.isArray(val)) {\n    return \"array\";\n  } else if (val === null) {\n    return \"null\";\n  } else {\n    return typeof val;\n  }\n}\n\ntype NodeTypesWithoutComment = t.Node[\"type\"] | keyof t.Aliases;\n\ntype NodeTypes = NodeTypesWithoutComment | t.Comment[\"type\"];\n\ntype PrimitiveTypes = ReturnType<typeof getType>;\n\ntype FieldDefinitions = {\n  [x: string]: FieldOptions;\n};\n\ntype DefineTypeOpts = {\n  fields?: FieldDefinitions;\n  visitor?: Array<string>;\n  aliases?: Array<string>;\n  builder?: Array<string>;\n  inherits?: NodeTypes;\n  deprecatedAlias?: string;\n  validate?: Validator;\n};\n\nexport type Validator = (\n  | { type: PrimitiveTypes }\n  | { each: Validator }\n  | { chainOf: Validator[] }\n  | { oneOf: any[] }\n  | { oneOfNodeTypes: NodeTypes[] }\n  | { oneOfNodeOrValueTypes: (NodeTypes | PrimitiveTypes)[] }\n  | { shapeOf: { [x: string]: FieldOptions } }\n  | {}\n) &\n  ((node: t.Node, key: string, val: any) => void);\n\nexport type FieldOptions = {\n  default?: string | number | boolean | [];\n  optional?: boolean;\n  validate?: Validator;\n};\n\nexport function validate(validate: Validator): FieldOptions {\n  return { validate };\n}\n\nexport function typeIs(typeName: NodeTypes | NodeTypes[]) {\n  return typeof typeName === \"string\"\n    ? assertNodeType(typeName)\n    : assertNodeType(...typeName);\n}\n\nexport function validateType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(typeIs(typeName));\n}\n\nexport function validateOptional(validate: Validator): FieldOptions {\n  return { validate, optional: true };\n}\n\nexport function validateOptionalType(\n  typeName: NodeTypes | NodeTypes[],\n): FieldOptions {\n  return { validate: typeIs(typeName), optional: true };\n}\n\nexport function arrayOf(elementType: Validator): Validator {\n  return chain(assertValueType(\"array\"), assertEach(elementType));\n}\n\nexport function arrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return arrayOf(typeIs(typeName));\n}\n\nexport function validateArrayOfType(typeName: NodeTypes | NodeTypes[]) {\n  return validate(arrayOfType(typeName));\n}\n\nexport function assertEach(callback: Validator): Validator {\n  function validator(node: t.Node, key: string, val: any) {\n    if (!Array.isArray(val)) return;\n\n    for (let i = 0; i < val.length; i++) {\n      const subkey = `${key}[${i}]`;\n      const v = val[i];\n      callback(node, subkey, v);\n      if (process.env.BABEL_TYPES_8_BREAKING) validateChild(node, subkey, v);\n    }\n  }\n  validator.each = callback;\n  return validator;\n}\n\nexport function assertOneOf(...values: Array<any>): Validator {\n  function validate(node: any, key: string, val: any) {\n    if (values.indexOf(val) < 0) {\n      throw new TypeError(\n        `Property ${key} expected value to be one of ${JSON.stringify(\n          values,\n        )} but got ${JSON.stringify(val)}`,\n      );\n    }\n  }\n\n  validate.oneOf = values;\n\n  return validate;\n}\n\nexport function assertNodeType(...types: NodeTypes[]): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeTypes = types;\n\n  return validate;\n}\n\nexport function assertNodeOrValueType(\n  ...types: (NodeTypes | PrimitiveTypes)[]\n): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    for (const type of types) {\n      if (getType(val) === type || is(type, val)) {\n        validateChild(node, key, val);\n        return;\n      }\n    }\n\n    throw new TypeError(\n      `Property ${key} of ${\n        node.type\n      } expected node to be of a type ${JSON.stringify(\n        types,\n      )} but instead got ${JSON.stringify(val?.type)}`,\n    );\n  }\n\n  validate.oneOfNodeOrValueTypes = types;\n\n  return validate;\n}\n\nexport function assertValueType(type: PrimitiveTypes): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const valid = getType(val) === type;\n\n    if (!valid) {\n      throw new TypeError(\n        `Property ${key} expected type of ${type} but got ${getType(val)}`,\n      );\n    }\n  }\n\n  validate.type = type;\n\n  return validate;\n}\n\nexport function assertShape(shape: { [x: string]: FieldOptions }): Validator {\n  function validate(node: t.Node, key: string, val: any) {\n    const errors = [];\n    for (const property of Object.keys(shape)) {\n      try {\n        validateField(node, property, val[property], shape[property]);\n      } catch (error) {\n        if (error instanceof TypeError) {\n          errors.push(error.message);\n          continue;\n        }\n        throw error;\n      }\n    }\n    if (errors.length) {\n      throw new TypeError(\n        `Property ${key} of ${\n          node.type\n        } expected to have the following:\\n${errors.join(\"\\n\")}`,\n      );\n    }\n  }\n\n  validate.shapeOf = shape;\n\n  return validate;\n}\n\nexport function assertOptionalChainStart(): Validator {\n  function validate(node: t.Node) {\n    let current = node;\n    while (node) {\n      const { type } = current;\n      if (type === \"OptionalCallExpression\") {\n        if (current.optional) return;\n        current = current.callee;\n        continue;\n      }\n\n      if (type === \"OptionalMemberExpression\") {\n        if (current.optional) return;\n        current = current.object;\n        continue;\n      }\n\n      break;\n    }\n\n    throw new TypeError(\n      `Non-optional ${node.type} must chain from an optional OptionalMemberExpression or OptionalCallExpression. Found chain from ${current?.type}`,\n    );\n  }\n\n  return validate;\n}\n\nexport function chain(...fns: Array<Validator>): Validator {\n  function validate(...args: Parameters<Validator>) {\n    for (const fn of fns) {\n      fn(...args);\n    }\n  }\n  validate.chainOf = fns;\n\n  if (\n    fns.length >= 2 &&\n    \"type\" in fns[0] &&\n    fns[0].type === \"array\" &&\n    !(\"each\" in fns[1])\n  ) {\n    throw new Error(\n      `An assertValueType(\"array\") validator can only be followed by an assertEach(...) validator.`,\n    );\n  }\n\n  return validate;\n}\n\nconst validTypeOpts = [\n  \"aliases\",\n  \"builder\",\n  \"deprecatedAlias\",\n  \"fields\",\n  \"inherits\",\n  \"visitor\",\n  \"validate\",\n];\nconst validFieldKeys = [\"default\", \"optional\", \"validate\"];\n\nconst store = {} as Record<string, DefineTypeOpts>;\n\n// Wraps defineType to ensure these aliases are included.\nexport function defineAliasedType(...aliases: string[]) {\n  return (type: string, opts: DefineTypeOpts = {}) => {\n    let defined = opts.aliases;\n    if (!defined) {\n      if (opts.inherits) defined = store[opts.inherits].aliases?.slice();\n      defined ??= [];\n      opts.aliases = defined;\n    }\n    const additional = aliases.filter(a => !defined.includes(a));\n    defined.unshift(...additional);\n    defineType(type, opts);\n  };\n}\n\nexport default function defineType(type: string, opts: DefineTypeOpts = {}) {\n  const inherits = (opts.inherits && store[opts.inherits]) || {};\n\n  let fields = opts.fields;\n  if (!fields) {\n    fields = {};\n    if (inherits.fields) {\n      const keys = Object.getOwnPropertyNames(inherits.fields);\n      for (const key of keys) {\n        const field = inherits.fields[key];\n        const def = field.default;\n        if (\n          Array.isArray(def) ? def.length > 0 : def && typeof def === \"object\"\n        ) {\n          throw new Error(\n            \"field defaults can only be primitives or empty arrays currently\",\n          );\n        }\n        fields[key] = {\n          default: Array.isArray(def) ? [] : def,\n          optional: field.optional,\n          validate: field.validate,\n        };\n      }\n    }\n  }\n\n  const visitor: Array<string> = opts.visitor || inherits.visitor || [];\n  const aliases: Array<string> = opts.aliases || inherits.aliases || [];\n  const builder: Array<string> =\n    opts.builder || inherits.builder || opts.visitor || [];\n\n  for (const k of Object.keys(opts)) {\n    if (validTypeOpts.indexOf(k) === -1) {\n      throw new Error(`Unknown type option \"${k}\" on ${type}`);\n    }\n  }\n\n  if (opts.deprecatedAlias) {\n    DEPRECATED_KEYS[opts.deprecatedAlias] = type as NodeTypesWithoutComment;\n  }\n\n  // ensure all field keys are represented in `fields`\n  for (const key of visitor.concat(builder)) {\n    fields[key] = fields[key] || {};\n  }\n\n  for (const key of Object.keys(fields)) {\n    const field = fields[key];\n\n    if (field.default !== undefined && builder.indexOf(key) === -1) {\n      field.optional = true;\n    }\n    if (field.default === undefined) {\n      field.default = null;\n    } else if (!field.validate && field.default != null) {\n      field.validate = assertValueType(getType(field.default));\n    }\n\n    for (const k of Object.keys(field)) {\n      if (validFieldKeys.indexOf(k) === -1) {\n        throw new Error(`Unknown field key \"${k}\" on ${type}.${key}`);\n      }\n    }\n  }\n\n  VISITOR_KEYS[type] = opts.visitor = visitor;\n  BUILDER_KEYS[type] = opts.builder = builder;\n  NODE_FIELDS[type] = opts.fields = fields;\n  ALIAS_KEYS[type as NodeTypesWithoutComment] = opts.aliases = aliases;\n  aliases.forEach(alias => {\n    FLIPPED_ALIAS_KEYS[alias] = FLIPPED_ALIAS_KEYS[alias] || [];\n    FLIPPED_ALIAS_KEYS[alias].push(type as NodeTypesWithoutComment);\n  });\n\n  if (opts.validate) {\n    NODE_PARENT_VALIDATIONS[type] = opts.validate;\n  }\n\n  store[type] = opts;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}